
from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware
from fastapi.middleware.gzip import GZipMiddleware
import ssl

from tortoise import Tortoise

from src.api.init import init_holiday, init_worktimestandard

from src.api.auth import router as login_router
from src.api.timetrack import router as time_router
from src.api.admin import router as admin_router


app = FastAPI()

app.include_router(login_router, prefix="/auth", tags=["auth"])
app.include_router(time_router, prefix="/time", tags=["time"])
app.include_router(admin_router, prefix="/admin", tags=["admin"])

# # HTTPS 리디렉션 미들웨어 추가
# app.add_middleware(HTTPSRedirectMiddleware)
#
# # GZip 압축 미들웨어 추가 (선택 사항)
# app.add_middleware(GZipMiddleware, minimum_size=500)
#
# # SSL 설정
# ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
# ssl_context.load_cert_chain(certfile="/etc/letsencrypt/live/www.octopatent.com/cert.pem", keyfile="/etc/letsencrypt/live/www.octopatent.com/privkey.pem")
# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8000, ssl=ssl_context)


# for front-end
origins = [
    "http://localhost",
    "http://localhost:8080",
    "http://localhost:9000",
    "http://3.34.198.181:8000",
    "https://claytimetracker.vercel.app/"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup():
    await init_db()
    await init_holiday()
    await init_worktimestandard()
    

@app.on_event("shutdown")
async def shutdown():
    await Tortoise.close_connections()

# DB 세팅
async def init_db():
    await Tortoise.init(
            db_url='postgres://postgres:claytimetracker@localhost:5432/timetracker',
            modules={'models': ['src.model.model']},
            #using 'models' directory
            #models.py is generated by tortoise-orm
        )
    
    await Tortoise.generate_schemas()

